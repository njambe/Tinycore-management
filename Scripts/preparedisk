#! /bin/bash

#### Global variables
version="1.1"
sambashare="/mnt/images"
imagespart="/dev/sda7"
sharedpart="/dev/sda8"

function fetchImagesPartition {
	partname=`echo $imagespart | awk -F "/" '{print $3}'`

	mountans=`mount | grep $imagespart`
	if [ "$mountans" == "" ]; then
		imglocation="/mnt/$partname"
		mkdir $imglocation 2> /dev/null
		mount $imagespart $imglocation
		echo "The Images partition ($imagespart) is now mounted on $imglocation"
	else
		rocheck=`echo $mountans | grep rw`
		if [ "$rocheck" == "" ]; then
			echo 'ERROR : The Images partition ($imagespart) is read-only. Please unmount it'
			echo 'Abort'
			exit 1
		fi
		imglocation=`echo $mountans | awk '{print $3}'`
		echo "The Images partition ($imagespart) is mounted on $imglocation"
	fi
}

function version {
	echo "$0: Version $version"
	echo "Group 1, C&N3, University of Abertay Dundee"
	echo "2014"
	exit 0
}

function help {
	echo "Usage: $0 [options]"
	echo ""
	echo "This script will prepare the disk for the first use :"
	echo -e "\t Format images and shared partitions"
	echo -e "\t Copy locally images from the server"
	echo ""
	echo "Options :"
	echo -e "\t -a : Perform a full disk preparation (same as -pc)"
	echo ""
	echo -e "\t -p : Make the partition table and format"
	echo -e "\t -c : Copy all original images from the server"
	echo ""
	echo -e "\t -h : Display this help"
	echo -e "\t -v : Display the version of the script"
	exit 0
}

#### This function displays a message while the copy is running
function message {
	echo $2
	t=1
	total=`ls -lh $sambashare/$3 | awk '{print $5}'`			# Get the size of the file to copy
	trap "kill $1 2> /dev/null" EXIT					# If Ctrl-C is called, the whole script is killed
	while kill -0 $1 2> /dev/null
	do
		remain=`ls -lh $imglocation/original/$3 2> /dev/null | awk '{print $5}'`	# Get the size already done
		echo -ne "                                               "	# Clear the line
		echo -ne "\r" $t "s :" $remain "/" $total			# Display the message
		t=`expr $t + 1`							# Increments the seconds number
		sleep 1
	done

	remain=`ls -lh $imglocation/original/$3 2> /dev/null | awk '{print $5}'`
	echo -ne "                                               "
	echo -ne "\r" $t "s :" $remain "/" $total

	trap - EXIT								# Close the trap
	echo -e "\t\t\t[\e[32mOK\e[39m]"					# Displays OK in green
}

if [ `whoami` != "root" ]; then
	echo "This script needs root privileges"
	exit 1
fi

if [ $# == 0 ]; then
	help
fi

while getopts :apcvh opt
do
	case "$opt" in
		a) mkpart="1"
		   copy="1";;
		p) mkpart="1";;
		c) copy="1";;
		h) help;;
		v) version;;
		\?) help;;
	esac
done

if [ "$mkpart" == "1" ]; then
	umount /dev/sda* 2> /dev/null

	echo -n "Restore the partition table..."
	sfdisk --force /dev/sda > /dev/null 2>&1 < $sambashare/parttable.out
	sfdisk -R /dev/sda
	echo -e "\t\t[\e[32mOK\e[39m]\nFormating partitions"
	sleep 1
	echo -n "Images partition..."
	mkfs.ext3 -q $imagespart
	echo -en "\t\t\t[\e[32mOK\e[39m]\nShared partition..."
	mkfs.ntfs -qf -L "Shared" $sharedpart
	echo -en "\t\t\t[\e[32mOK\e[39m]\n"
fi

if [ "$copy" == "1" ]; then
	fetchImagesPartition

	echo "Copying images from server..."
	mkdir $imglocation/original 2> /dev/null

	#### Copy each image from the samba share to the local partition
	cp $sambashare/linboot.tar.gz $imglocation/original/linboot.tar.gz &
	message $! "Linux /boot" linboot.tar.gz

 	cp $sambashare/linux.tar.gz $imglocation/original/linux.tar.gz &
	message $! "Linux" linux.tar.gz

	cp $sambashare/windows.tar.gz $imglocation/original/windows.tar.gz &
	message $! "Windows" windows.tar.gz

	cp $sambashare/mbr.out $imglocation/original/mbr.out &
	message $! "MBR" mbr.out
fi

if [ "$mkpart" == "1" -a "$copy" == "1" ]; then
	echo -e "\e[32mDisk prepared successfully\e[39m"
fi
